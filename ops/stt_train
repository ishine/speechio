#!/usr/bin/env python3
# coding = utf8
#
# Copyright (c) 2021 Jiayu DU
# All rights reserved.

import os
import argparse
import torch.multiprocessing
from omegaconf import OmegaConf
from core import stt

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--node_rank', type = int, required = True)
    parser.add_argument('--config', type = str, required = True)
    parser.add_argument('dir', type = str)
    args = parser.parse_args()
    print(args)

    config = OmegaConf.load(args.config)

    if CUDA_VISIBLE_DEVICES := os.environ.get('CUDA_VISIBLE_DEVICES'):
        cuda_devices = [ int(x) for x in CUDA_VISIBLE_DEVICES.split(',') ]
    else:
        cuda_devices = [ x for x in range(config.nproc_per_node) ]

    world_size = config.nnodes * config.nproc_per_node
    processes = []
    for local_rank in range(config.nproc_per_node):
        rank = args.node_rank * config.nproc_per_node + local_rank
        device_id = cuda_devices[local_rank]
        p = torch.multiprocessing.Process(
            target=stt.train,
            args=(config, args.dir, device_id, world_size, rank)
        )
        p.start()
        processes.append(p)

    for p in processes:
        p.join()
